"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _os() {
  const data = _interopRequireDefault(require("os"));

  _os = function () {
    return data;
  };

  return data;
}

function _path() {
  const data = _interopRequireDefault(require("path"));

  _path = function () {
    return data;
  };

  return data;
}

function _fsExtra() {
  const data = _interopRequireDefault(require("fs-extra"));

  _fsExtra = function () {
    return data;
  };

  return data;
}

function _minimist() {
  const data = _interopRequireDefault(require("minimist"));

  _minimist = function () {
    return data;
  };

  return data;
}

function _semver() {
  const data = _interopRequireDefault(require("semver"));

  _semver = function () {
    return data;
  };

  return data;
}

var _validate = require("./validate");

var _DirectoryAlreadyExistsError = _interopRequireDefault(require("./errors/DirectoryAlreadyExistsError"));

var _printRunInstructions = _interopRequireDefault(require("./printRunInstructions"));

function _cliTools() {
  const data = require("@react-native-community/cli-tools");

  _cliTools = function () {
    return data;
  };

  return data;
}

var _template = require("./template");

var _editTemplate = require("./editTemplate");

var PackageManager = _interopRequireWildcard(require("../../tools/packageManager"));

var _templateName = require("./templateName");

var _banner = _interopRequireDefault(require("./banner"));

var _loader = require("../../tools/loader");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function adjustNameIfUrl(name) {
  // We use package manager to infer the name of the template module for us.
  // That's why we get it from temporary package.json, where the name is the
  // first and only dependency (hence 0).
  if (name.match(/https?:/)) {
    name = Object.keys(JSON.parse(_fsExtra().default.readFileSync('./package.json', 'utf8')).dependencies)[0];
  }

  return name;
}

async function createFromExternalTemplate(projectName, templateName, npm) {
  _cliTools().logger.debug('Initializing new project from external template');

  _cliTools().logger.log(_banner.default);

  const Loader = (0, _loader.getLoader)();
  const loader = new Loader({
    text: 'Downloading template'
  });
  loader.start();

  const templateSourceDir = _fsExtra().default.mkdtempSync(_path().default.join(_os().default.tmpdir(), 'rncli-init-template-'));

  try {
    let {
      uri,
      name
    } = await (0, _templateName.processTemplateName)(templateName);
    await (0, _template.installTemplatePackage)(uri, templateSourceDir, npm);
    loader.succeed();
    loader.start('Copying template');
    name = adjustNameIfUrl(name);
    const templateConfig = (0, _template.getTemplateConfig)(name, templateSourceDir);
    (0, _template.copyTemplate)(name, templateConfig.templateDir, templateSourceDir);
    loader.succeed();
    loader.start('Preparing template');
    (0, _editTemplate.changePlaceholderInTemplate)(projectName, templateConfig.placeholderName);
    loader.succeed();
    const {
      postInitScript
    } = templateConfig;

    if (postInitScript) {
      // Leaving trailing space because there may be stdout from the script
      loader.start('Executing post init script ');
      await (0, _template.executePostInitScript)(name, postInitScript, templateSourceDir);
      loader.succeed();
    }

    loader.start('Installing all required dependencies');
    await PackageManager.installAll({
      preferYarn: !npm,
      silent: true
    });
    loader.succeed();
  } catch (e) {
    loader.fail();
    throw new Error(e);
  } finally {
    _fsExtra().default.removeSync(templateSourceDir);
  }
}

async function createFromReactNativeTemplate(projectName, version, npm) {
  _cliTools().logger.debug('Initializing new project');

  _cliTools().logger.log(_banner.default);

  const Loader = (0, _loader.getLoader)();
  const loader = new Loader({
    text: 'Downloading template'
  });
  loader.start();

  const templateSourceDir = _fsExtra().default.mkdtempSync(_path().default.join(_os().default.tmpdir(), 'rncli-init-template-'));

  try {
    if (_semver().default.valid(version) && !_semver().default.gte(version, '0.60.0')) {
      throw new Error('Cannot use React Native CLI to initialize project with version lower than 0.60.0');
    }

    const TEMPLATE_NAME = 'react-native';
    const {
      uri
    } = await (0, _templateName.processTemplateName)(`${TEMPLATE_NAME}@${version}`);
    await (0, _template.installTemplatePackage)(uri, templateSourceDir, npm);
    loader.succeed();
    loader.start('Copying template');
    const templateConfig = (0, _template.getTemplateConfig)(TEMPLATE_NAME, templateSourceDir);
    (0, _template.copyTemplate)(TEMPLATE_NAME, templateConfig.templateDir, templateSourceDir);
    loader.succeed();
    loader.start('Processing template');
    (0, _editTemplate.changePlaceholderInTemplate)(projectName, templateConfig.placeholderName);
    loader.succeed();
    const {
      postInitScript
    } = templateConfig;

    if (postInitScript) {
      loader.start('Executing post init script');
      await (0, _template.executePostInitScript)(TEMPLATE_NAME, postInitScript, templateSourceDir);
      loader.succeed();
    }

    loader.start('Installing all required dependencies');
    await PackageManager.installAll({
      preferYarn: !npm,
      silent: true
    });
    loader.succeed();
  } catch (e) {
    loader.fail();
    throw new Error(e);
  } finally {
    _fsExtra().default.removeSync(templateSourceDir);
  }
}

function createProject(projectName, options, version) {
  _fsExtra().default.mkdirSync(projectName);

  process.chdir(projectName);

  if (options.template) {
    return createFromExternalTemplate(projectName, options.template, options.npm);
  }

  return createFromReactNativeTemplate(projectName, version, options.npm);
}

var initialize = async function initialize([projectName], _context, options) {
  (0, _validate.validateProjectName)(projectName);
  /**
   * Commander is stripping `version` from options automatically.
   * We have to use `minimist` to take that directly from `process.argv`
   */

  const version = (0, _minimist().default)(process.argv).version || 'latest';

  if (_fsExtra().default.existsSync(projectName)) {
    throw new _DirectoryAlreadyExistsError.default(projectName);
  }

  try {
    await createProject(projectName, options, version);
    (0, _printRunInstructions.default)(process.cwd(), projectName);
  } catch (e) {
    _cliTools().logger.error(e.message);

    _fsExtra().default.removeSync(projectName);
  }
};

exports.default = initialize;